#! /usr/bin/env perl

# datafilter - command line tool for DataFilter suite

# Copyright (C) 2006,2007,2009,2010,2011 Stefan Hornburg (Racke) <racke@linuxia.de>

# This file is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2, or (at your option) any
# later version.

# This file is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this file; see the file COPYING.  If not, write to the Free
# Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

use strict;
use warnings;

use Getopt::Long;

use DataFilter;

# process commandline parameters
my %opts;
my $whandler = $SIG{__WARN__};
$SIG{__WARN__} = sub {print STDERR "$0: @_";};
unless (GetOptions (\%opts, 'show-columns', 'show-tables',
					'skip-before=s', 'rowspan=i',
					'config-file|c=s',
					'allow-loose-quotes',
					'encoding-in=s', 'encoding-out=s',
					'header-row=i',
		    'input-table=s',
					'match=s',
                    'print-column=s',
                    'skip-empty',
					'noheader')) {
    exit 1;
}
$SIG{__WARN__} = $whandler;


#
my $df = new DataFilter;
my ($input, $output, $type, $record);
my (%input_parms, $parm_name, $input_spec, $output_spec, @cols);

if ($opts{'config-file'}) {
	$df->configure(type => 'AppConfig', file => $opts{'config-file'});
	$input = $df->source();
	my @cols = $input->columns($input->{table});

	if (@cols) {
	    $output = $df->target(columns => \@cols);
	}
	else {
	    $output = $df->target();
	}
}
else {
	# sanity check
	unless (@ARGV) {
		die "$0: missing parameters\n";
	}

	($input_spec, $output_spec) = @ARGV;

	%input_parms = (name => $input_spec,
					noheader => $opts{noheader},
					rowspan => $opts{rowspan},
					header_row => $opts{'header-row'},
					skip_before => $opts{'skip-before'});

	if (exists $opts{'input-table'}) {
	    $input_parms{table} = $opts{'input-table'};
	}
	
	for (qw/allow-loose-quotes encoding-in encoding-out/) {
		if (exists $opts{$_}) {
			$parm_name = $_;
			$parm_name =~ s/-/_/g;
			
			$input_parms{$parm_name} = $opts{$_};
		}
	}
	
	$input = $df->source(%input_parms);
}

if ($opts{'show-tables'}) {
	for ($input->tables()) {
		print "$_\n";
	}
}

if ($opts{'show-columns'}) {
	for ($input->columns()) {
		print "$_\n";
	}
}

if (defined $output_spec) {
	if ($output_spec =~ s/^(xlsx?|csv|tab)://i
		|| $output_spec =~ m/\.(xlsx?|csv|tab)$/i) {
		$output = $df->target(type => uc($1),
							  name => $output_spec,
							  columns => [$input->columns()]);
	}
}

if ($output || $opts{'print-column'}) {
	while ($record = $input->enum_records($opts{'input-table'})) {
		if (defined $opts{match}
			&& $opts{match} =~ /^(\w+)([=~])(.*)$/) {
			my ($field, $op, $value) = ($1, $2, $3);										unless ($record->{$field} eq $value) {
				next;
			}
		}

		if ($opts{'print-column'}) {
            my $data = $record->{$opts{'print-column'}};
            if ($opts{'skip-empty'} && $data !~ /\S/) {
                next;
            }
		    print $data, "\n";
                }
		else {
		    $output->add_record('', $record);
		}
	}
}

